// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[derive(Clone)]
pub struct Elevator {
    pub id: u32,
    pub current_floor: u32,
    pub destination_floor: Option<u32>,
    pub pressed_floors: _rt::Vec<u32>,
    pub load: f32,
}
impl ::core::fmt::Debug for Elevator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Elevator")
            .field("id", &self.id)
            .field("current-floor", &self.current_floor)
            .field("destination-floor", &self.destination_floor)
            .field("pressed-floors", &self.pressed_floors)
            .field("load", &self.load)
            .finish()
    }
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Floor {
    pub level: u32,
    pub up_button: bool,
    pub down_button: bool,
}
impl ::core::fmt::Debug for Floor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Floor")
            .field("level", &self.level)
            .field("up-button", &self.up_button)
            .field("down-button", &self.down_button)
            .finish()
    }
}
#[allow(unused_unsafe, clippy::all)]
pub fn go_to_floor(elevator_id: u32, floor_num: u32) -> () {
    unsafe {
        #[cfg(target_arch = "wasm32")]
        #[link(wasm_import_module = "$root")]
        unsafe extern "C" {
            #[link_name = "go-to-floor"]
            fn wit_import0(_: i32, _: i32);
        }
        #[cfg(not(target_arch = "wasm32"))]
        unsafe extern "C" fn wit_import0(_: i32, _: i32) {
            unreachable!()
        }
        unsafe { wit_import0(_rt::as_i32(&elevator_id), _rt::as_i32(&floor_num)) };
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_tick_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let base8 = arg0;
    let len8 = arg1;
    let mut result8 = _rt::Vec::with_capacity(len8);
    for i in 0..len8 {
        let base = base8.add(i * (16 + 3 * ::core::mem::size_of::<*const u8>()));
        let e8 = {
            let l0 = *base.add(0).cast::<i32>();
            let l1 = *base.add(4).cast::<i32>();
            let l2 = i32::from(*base.add(8).cast::<u8>());
            let l4 = *base.add(16).cast::<*mut u8>();
            let l5 = *base
                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                .cast::<usize>();
            let len6 = l5;
            let l7 = *base
                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                .cast::<f32>();
            Elevator {
                id: l0 as u32,
                current_floor: l1 as u32,
                destination_floor: match l2 {
                    0 => None,
                    1 => {
                        let e = {
                            let l3 = *base.add(12).cast::<i32>();
                            l3 as u32
                        };
                        Some(e)
                    }
                    _ => _rt::invalid_enum_discriminant(),
                },
                pressed_floors: _rt::Vec::from_raw_parts(l4.cast(), len6, len6),
                load: l7,
            }
        };
        result8.push(e8);
    }
    _rt::cabi_dealloc(
        base8,
        len8 * (16 + 3 * ::core::mem::size_of::<*const u8>()),
        ::core::mem::size_of::<*const u8>(),
    );
    let base12 = arg2;
    let len12 = arg3;
    let mut result12 = _rt::Vec::with_capacity(len12);
    for i in 0..len12 {
        let base = base12.add(i * 8);
        let e12 = {
            let l9 = *base.add(0).cast::<i32>();
            let l10 = i32::from(*base.add(4).cast::<u8>());
            let l11 = i32::from(*base.add(5).cast::<u8>());
            Floor {
                level: l9 as u32,
                up_button: _rt::bool_lift(l10 as u8),
                down_button: _rt::bool_lift(l11 as u8),
            }
        };
        result12.push(e12);
    }
    _rt::cabi_dealloc(base12, len12 * 8, 4);
    T::tick(result8, result12);
}
pub trait Guest {
    fn tick(elevators: _rt::Vec<Elevator>, floors: _rt::Vec<Floor>) -> ();
}
#[doc(hidden)]
macro_rules! __export_world_core_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "tick")] unsafe extern "C" fn
        export_tick(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8, arg3 : usize,) {
        unsafe { $($path_to_types)*:: _export_tick_cabi::<$ty > (arg0, arg1, arg2, arg3)
        } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_core_cabi;
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::vec::Vec;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_core_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_core_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_core_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:elevator-saga:core@0.1.0:core:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 375] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xfc\x01\x01A\x02\x01\
A\x0c\x01ky\x01py\x01r\x05\x02idy\x0dcurrent-floory\x11destination-floor\0\x0epr\
essed-floors\x01\x04loadv\x03\0\x08elevator\x03\0\x02\x01r\x03\x05levely\x09up-b\
utton\x7f\x0bdown-button\x7f\x03\0\x05floor\x03\0\x04\x01@\x02\x0belevator-idy\x09\
floor-numy\x01\0\x03\0\x0bgo-to-floor\x01\x06\x01p\x03\x01p\x05\x01@\x02\x09elev\
ators\x07\x06floors\x08\x01\0\x04\0\x04tick\x01\x09\x04\0\x1delevator-saga:core/\
core@0.1.0\x04\0\x0b\x0a\x01\0\x04core\x03\0\0\0G\x09producers\x01\x0cprocessed-\
by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
